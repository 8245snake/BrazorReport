@inject HighLightingService _HighLightingService
@inject ReportComponentService _Service
@inject ILogger<PropertyWindow> logger;
@using Microsoft.Extensions.Logging;

    <div>
        <div>
            <div>全要素一覧</div>
            <select class="custom-select" @onchange="OnChange">
                @if (_Service?.EnumAllModels() != null)
                {
                    <option value="none">選択できます</option>

                    @foreach (var child in _Service.EnumAllModels())
                    {
                        @if (child.ID == _HighLightingService.HighLightingID)
                        {
                            <option value="@child.ID" selected>@child?.Name</option>
                        }
                        else
                        {
                            <option value="@child.ID">@child?.Name</option>
                        }
                    }
                }
            </select>
        </div>
        <input id="button-debug" type="button" value="デバッグ用" onclick="onDebugButtonClick()" />

        <PropertyPanelBase Model="@Model" />

        @switch (Model.ModelType)
        {
            case DraggableComponentModel.DraggableComponentModelType.TextBlock:
                <TextPropertyPanel Model="@Model" />

                break;
            case DraggableComponentModel.DraggableComponentModelType.Table:
                break;
            case DraggableComponentModel.DraggableComponentModelType.Picture:
                <PicturePropertyPanel Model="@Model" />

                break;
            case DraggableComponentModel.DraggableComponentModelType.Container:
                <ContainerPropertyPanel Model="@Model" />
                break;
            default:
                break;
        }


    </div>

@code {

    private DraggableComponentModel Model = new DraggableComponentModel();

    protected override void OnInitialized()
    {
        logger.LogInformation($"OnInitialized");
        _HighLightingService.HighLightChanged += HighLightChanged;
        _Service.ModelPropertyChanged += OnModelPropertyChanged;
    }

    private void OnModelPropertyChanged(string id, DraggableComponentModel model)
    {
        //logger.LogInformation($"OnModelPropertyChanged {id} {model.ID}");
        StateHasChanged();
    }

    private void HighLightChanged(object sender, EventArgs e)
    {
        var model = _Service.Find(_HighLightingService.HighLightingID);
        if (model == null)
        {
            return;
        }
        logger.LogInformation($"HighLightChanged {model.ID}");
        Model = model;
        StateHasChanged();
    }

    private void OnChange(ChangeEventArgs e)
    {
        _HighLightingService.HighLightingID = (string)e.Value;
    }
}
