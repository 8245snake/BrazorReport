@inject HighLightingService _HighLightingService
@inject ReportComponentService _Service

<div>
    <input id="button-debug" type="button" value="デバッグ用" onclick="onDebugButtonClick()" />

    <PropertyPanelBase Model="@Model" />

    @switch (Model.ModelType)
    {
        case DraggableComponentModel.DraggableComponentModelType.TextBlock:
            <TextPropertyPanel Model="@Model" />

            break;
        case DraggableComponentModel.DraggableComponentModelType.Table:
            break;
        case DraggableComponentModel.DraggableComponentModelType.Picture:
            <PicturePropertyPanel Model="@Model"/>

            break;
        case DraggableComponentModel.DraggableComponentModelType.Container:
            break;
        default:
            break;
    }


</div>

@code {

    private DraggableComponentModel Model = new DraggableComponentModel();

    protected override void OnInitialized()
    {
        _HighLightingService.HighLightChanged += HighLightChanged;
        _Service.ModelPropertyChanged += OnModelPropertyChanged;
    }

    private void OnModelPropertyChanged(string id, DraggableComponentModel model)
    {
        Model = model;
        StateHasChanged();
    }

    private void HighLightChanged(object sender, EventArgs e)
    {
        var model = _Service.Find(_HighLightingService.HighLightingID);
        if (model == null)
        {
            return;
        }
        Model = model;
        StateHasChanged();
    }
}
